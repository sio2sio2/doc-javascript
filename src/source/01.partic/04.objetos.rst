.. highlight:: javascript

.. _objetos:

*******
Objetos
*******
En *Javascript* **NO** existen clases\ [#]_, sólo objetos y éstos no son más que
colecciones de atributos, los cuales pueden ser también funciones, esto es,
métodos::

   const rectangulo = {
      altura: 10,
      anchura: 7,
      area: function() {  // Como este atributo es una función, actúa como método.
         return this.altura*this.anchura;
      }
   }

   console.log(rectangulo.area());  // 70.
   rectangulo.anchura = 8;
   console.log(rectangulo.area());  // 80.

.. note:: Al ser las funciones ciudadanas de primera clase en *Javascript*, los
   métodos son atributos cuyo valor es una función. Por este motivo, podemos
   incluir los métodos dentro del término atributos y así se hará a lo largo del
   texto. La fórmula expuesta en el código para definir ``rectangulo`` deja
   clara esta equivalencia, puesto que *area* se define de modo análogo a
   *anchura* y *altura*. Sin embargo, hay una sintaxis simplificada para definir
   métodos que enmascara esta equivalencia::

      const rectangulo = {
         altura: 10,
         anchura: 7,
         area() {  // Como este atributo es una función, actúa como método.
            return this.altura*this.anchura;
         }
      }

   La utilizaremos ya que hemos dejado clara la naturaleza de los métodos como
   *atributos función*.

Así, pues, hemos construido un objeto ex novo a diferencia de todos esos
lenguajes orientados a objetos en que la creación de una clase implica la
instanciación de una clase. Comenzaremos por describir cómo son estos objetos
sin entrar a discutir estrategias para tener objetos semejantes (o sea, de una
misma *clase*) o parecidos\ [#]_

Características
***************

Definición
==========
En el ejemplo anterior, ya se expuesto la sintaxis básica para definir un
objeto: un diccionario de pares clave/valor donde la clave es una cadena o un
`símbolo
<https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol>`_
y se separa del valor mediante dos puntos. Si los valores se encuentran en
variables aparte cuyo nombre coincide con el que tendrá la clave::

   const anchura = 10, altura = 7;
   const rectangulo = {
      altura: altura,
      anchura: anchura,
      area() { return this.altura*this.anchura; }
   }

entonces puede usarse una sintaxis simplificada::

   const anchura = 10, altura = 7;
   const rectangulo = {
      altura,
      anchura,
      area() { return this.altura*this.anchura; }
   }

incluso para el método área, aunque como en este caso no hemos podido hacer uso
de la simplificación al no haber definido aparte la función *area*,

Por supuesto, tenemos total libertad para extender el objeto añadiendo nuevos
atributos::

   rectangulo.escalar = function(factor) {
      this.altura *= factor;
      this.anchura *= factor;
   }

o para eliminar atributos ya definidos::

   delete rectangulo.escalar;

Obsérvese que al hacer las definiciones, la clave no se ha escrito entre
comillas, sino sin ellas, pese a lo cual se sobreentiende como un literal. Si la
clave que se desea usar, se encuentra dentro de una variable, entonces se
requiere una sintaxis especial que haga entender al procesador que la clave no
es literal::

   const d1 = "altura", d2 = "anchura";

   const rectangulo = {
      [d1]: 10,
      [d2]:  7,
      area() { return this[d1]*this[d2]; }
   }

Uso
===
Para utilizar los atributos basta con usar la sintaxis del punto::

   console.log(rectangulo.altura);  // 10.
   console.log(rectangulo.area());  // 70.
   rectangulo.area = 8;
   console.log(rectangulo.area());  // 80.

aunque también podemos usar una sintaxis basada en corchetas::

   rectangulo["anchura"] = 5;
   rectangulo["area"]();  // 80.

Esta segunda sintaxis es interesante cuando el nombre de la propiedad la tenemos
dentro de una variable::

   let dimension = "anchura";
   rectangulo[dimension] = 6;

.. _object-descriptors:

Descriptores
============
Hasta ahora, al añadir atributos a un objeto nos hemos dedicado a enchufarlos
sin más. Sin embargo, cada atributo posee un descriptor que define las
caracteríosticas del atributo dentro del objeto.

`Object.getOwnPropertyDescriptor()`_
   Muestra el desriptor del atributo de un objeto::

      Object.getOwnPropertyDescriptor(rectangulo, "altura")
      { value: 10, writable: true, enumerable: true, configurable: true }

Además del valor, obtenemos que el atributo es:

* :dfn:`writable`, razón por la cual podemos darle un valor distinto.
* :dfn:`configurable`, razón por la cual podríamos cambiar estas propias
  características, haciendo que, por ejemplo, el valor fuera inmutable.
* :dfn:`enumerable`, lo que significa que el atributo será más visible, esto es,
  que algunas funciones que veremos más adelante serán capaces de ver que este
  atributo existe\ [#]_. 

Hay dos **tipos** de descriptores:

- :dfn:`Descriptor de dato`, que describe un atributo normal como el anterior y
  que se caracteriza por tener un valor (**value**).
- :dfn:`Descriptor de acceso`, que describe lo que en *Python* se denomina
  *propiedad*, esto es, un dato que dispone de un *setter* para establecer su
  valor y un *getter* para devolverlo. Por ejemplo, podríamos convertir las dos
  dimensiones de nuestro rectángulo en sendas propiedades para controlar que
  siempre introduzcan un número como valor. En este caso, el descriptor, en vez
  de disponer *value*, dispondrá *set* y *get*, Tampoco tendrá la
  característicva *writable*, que no tiene sentido, puesto que si se desea que
  la propiedad sea de sólo lectura, basta con no definir el *setter*. Las otras
  dos características, sin embargo, siguen teniendo validez. Dejaremos la
  discusión de las :ref:`propiedades <object-properties>` para el siguiente epígrafe.

Al definir un atributo (bien al crear un objeto, bien añadiéndolo después), las
características ``writable``, ``enumerable`` o ``configurable`` estarán siempre
a *true*. Para que adopten otro valor pueden usarse:

.. _object.defineproperty:

`Object.defineProperty()`_
   Permite definir o redefinir el descriptor de un atributo. Por ejemplo::

      Object.defineProperty(rectangulo, "color", {
         value: "negro",
         configurable: true
      })

   De esta forma añadimos un nuevo atributo puesto que el atributo color no
   existía previamente, y, además, indicamos cuál será el descriptor del dato.
   En el código no hemos incluido dos características (*writable* y
   *enumerable*), por lo que estas se fijarán a *false*. Cuando lo que se hace
   es utilizar un atributo ya existente, las características no enunciadas
   mantendrán su valor.

   Con esta definición, no podremos cambiar el color del rectángulo (*writable*
   es *false*)::

      rectangulo.color = "azul";
      rectangulo.color;  // Sigue siendo negro.

   pero podremos alterar el descriptor puesto que *configurable* lo fijamos a
   verdadero. También podremos borrar el atributo ya que es *configurable* quien
   controla esta posibilidad.

.. _object.defineproperties:

`Object.defineProperties()`_
   Como el anterior pero permite definir o redefinir a la vez los descriptores
   de varios atributos::

      Object.defineProperties(rectangulo, {
         color: {
            writable: false
         },
         altura: {
            configurable: false
         },
         anchura: {
            configurable: false
         },
         area: {
            enumerable: false
         }
      )

   Gracias a esto, no podremos borrar la altura ni la anchura del rectángulo.

.. note:: Object.create_ permite también definir descriptores a la vez que se
   clona un objeto.

Lista de atributos
==================
Hay algunos modos de conocer cuáles son los atributos que tenemos disponibles en
un objeto:

`Object.getOwnPropertyNames()`_
   Devuelve un *array* con los nombres de todos los atributos propios del
   objetos, sean estos enumerables o no::

      Object.getOwnPropertyNames(rectangulo);  // [ 'altura', 'anchura', 'area', 'color' ]


`Object.keys()`_
   Devuelve un *array* con los nombres de los atributos enumerables disponibles
   en el objeto::

      Object.getOwnPropertyNames(rectangulo);  // [ 'altura', 'anchura', 'color' ]

   donde no aparece ``area`` puesto que la definitmos antes como no enumerable.
   Sin embargo, la diferencia con respecto a la función anterior, va más allá de
   listar o no los atributos enumerables. `Object.keys()`_ lista también atributos
   que aunque no han sido definidos en el propio objetos, los ha heredado. Aún
   no hemos tratado las características de la |POO| aplicadas a *Ĵavascript*,
   pero ya veremos cómo unos objetos pueden heredar de otros.

`.hasOwnProperty(name)`_
   Es un método del objeto que comprueba si el objeto tiene un atributo propio
   con el nombre suministrado, sea enumerable o no::

      rectangulo.hasOwnProperty("area");  // true.

   .. note:: Obsérvese que este método `.hasOwnProperty(name)`_  no lo hemos
      definido nosotros en el objeto, así que forzosamente debe ser un método
      heredado. Porque no es propio, no nos lo devolvió
      `Object.getOwnPropertyNames()`_ y, porque no es enumerable, no lo hizo
      `Object.keys()`_

.. _object-properties:

Propiedades
===========
Las propiedades son atributos que, en vez de definir un valor, definen un
*setter* y un *getter*, aunque alguna de estas dos funciones puede no existir.
Podemos definir un atributo de este tipo bien declarando el descriptor
explícitamente (con `Object.defineProperty()`_ o `Object.defineProperties()`_)::

   Object.defineProperty(rectangulo, "perimetro", {
      get: function() {
         return 2*(this.anchura + this.altura);
      },
      enumerable: true
   });

   rectangulo.perimetro; // 34, o sea, 2*(10 + 7)

En este caso, hemos añadido una propiedad de sólo lectura, esto es, con
*getter*, pero no con *setter*. Alternativamente, la definición puede hacerse
así::

   Object.defineProperty(rectangulo, "perimetro", {
      get() {
         return 2*(this.anchura + this.altura);
      },
      enumerable: true
   });

Las propiedades también pueden definirse en el momento de crear el objeto. Por
ejemplo, si quisiéramos crear el objeto ``rectángulo`` de manera que anchura y
altura fueran propiedades, podríamos hacer lo siguiente::

   const rectangulo = {
      get altura() {
         return this._altura;
      },
      set altura(value) {
         if(typeof value !== 'number') throw new TypeError('Valor no numérico');
         this._altura = value;
      },
      get anchura() {
         return this._altura;
      },
      set anchura(value) {
         if(typeof value !== 'number') throw new TypeError('Valor no numérico');
         this._anchura = value;
      },
      area: function() {  // Como este atributo es una función, actúa como método.
         return this.altura*this.anchura;
      }
   }

   rectangulo.altura = 10;
   rectangulo.anchura = "No soy un número";  // Provoca error.

Nótese que en realidad los atributos *anchura* y *altura* no almacenan ningún
valor, por lo que necesitamos crear sendos atributos adicionales pàra cumplir
esta tarea.  Estos atributos, sin embargo, no han sido añadidos de ningún modo
especial por lo que son perfectamente accesibles y enumerables. En el código
anterior, nos hemos limitado a usar la notación del subrayado para hacer notar
que el atributo no debería usarse. Podemos usar otras técnicas más elaboradas.
Por ejemplo, utilizar como claves símbolo y, además, hacer no enumerable el
atributo::

   const altura = Symbol('altura');
   const anchura = Symbol('anchura');

   const rectangulo = {
      get altura() {
         return this[altura];
      },
      set altura(value) {
         if(typeof value !== 'number') throw new TypeError('Valor no numérico');
         this[altura] = value;
      },
   // etc...
   }

   Object.defineProperties(rectangulo, {
      [altura]: {enumerable: false},
      [anchura]: {enumerable: false}
   });

Observación
============
.. todo:: Hablar de **Proxy**.

Manejo de objetos
*****************
El ejemplo expuesto hasta aquí (un objeto único que definimos y usamos) no es un
ejemplo en absoluto real. Lo habitual es que requiramos crear muchos objetos que
comparten una misma naturaleza o bien una naturaleza semejante. Así, pues, el
*quid* de la cuestión está en poder construir objetos de naturaleza idéntica o
semejante de manera que se cumplan los principios de abstracción, encapsulación,
reutilización y extensibilidad.

Esto lo resuelven generalmente los lenguajes orientados a objetos recurriendo a
las clases y convirtiendo a cada objeto en la instanciación de su clase
correspondiente. Tal es el caso de lenguajes como *C++*, *Java* o *Python*.
*Javascript* tiene una filosofía totalmente distinta; pero, como es enormemente
versátil, es capaz de implementar los objetos usando este patrón de clases. Sin
embargo, hay voces extremadamente críticas con trasladar las clases a
*Javascript* e, incluso, con el concepto mismo de |POO| basada en clases.

.. note:: A este respecto es muy interesante la lectura de:

   - `Este demoledor artículo
     <https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3>`_
     de Eric Elliott. 

   - El artículo `Why prototypal inheritance matters
     <http://aaditmshah.github.io/why-prototypal-inheritance-matters/>`_ de
     Aadit M Shah.

Nuestra exposición constará de los siguientes puntos:

- Cómo implementa realmente *Javascript* el mecanismo de la herencia.
- Cómo llevar el modelo de clases jerárquicas a *Javasript*.
- Cuál es la alternativa que se propone al modelo de clases jerarquícas.

.. _object-herencia:

Herencia
========
En los lenguajes que utilizan clases, cada clase constituye la generalización de
un tipo distinto de objeto, de manera que a la definición de una clase
(:dfn:`superclase`) se añaden nuevas definiciones de atributos y métodos para
constituir una clae derivada (:dfn:`subclase`). A conservar los atributos y
métodos de la superclase (o clase padre) es a lo que se denomina :dfn:`herencia`:

.. image:: files/jerarquiaclases.png

La filosofía de *Javascript* es, sin embargo, totalmente distinta en la medida
en que no existen clases\ [#]_. La herencia de este lenguaje se conoce como
:dfn:`herencia prototípica` y consiste en que un objeto deriva (hereda) de
otro llamado :dfn:`prototipo`. Por tanto, si el objeto "b" deriva del objeto
"a", "a" es el prototipo de "b". El prototipo "a", a su vez, puede tener otro
prototipo del que deriva y así sucesivamente en lo que se conoce como
:dfn:`cadena de prototipos`. Obviamente, la cadena no puede ser infinita, sino
que tiene un final en el que el último prototipo deriva de ``null``:

.. image:: files/cadena_proto.png

Para implementar la cadena cada objeto posee una propiedad ``[[Proto]]``, que
oficiosamente se nombró ``__proto__`` y con tal nombre acabó pasando al
estándar, que aounta al prototipo. Cuando se invoca el atributo de un objeto,
primero se comprueba si éste está definido en el propio atributo, si lo está se
devuelve su valor y, si no, se comprueba si se encuentra definido en el
prototipo. Esta operación se repite sucesivamente de prototito a prototipo hasta
que o bien se encuentra el valor del atributo o se llega al final de la cadena
sin encontrarlo. En este segundo caso, *Javascript* devolverá ``undefined``.

.. note:: La asignación no fundiona así, si se da valor a un atributo, este se
   define sobre el propio objeto.

.. note:: El prototipo de un objeto creado *ex novo*::

      const obj = {}

   no es *null*, sino aquel en que se encuentran definidos métodos como
   `.hasOwnProperty(name)`_: ``Object.prototype``::

      obj.__proto__ === Object.prototype;  // true

   ``Object.prototype`` si es el último objeto de la cadena y por tanto su
   prototipo es *null*::

      Object.prototype.__proto__ === null;  // true.

   De dónde sale este ``Object.prototype`` se entenderá mejor al tratar las
   :ref:`funciones constructoras <object-class>`.

Implementación
--------------

.. _object.create:

En la práctica, la forma de crear un objeto cuyo prototipo sea otro es utilizar
`Object.create()`_\ [#]_ que permite la clonación::

   const rectangulo = {
      // Adicionalmente, podríamos definir
      // getters y setters para altura y anchura.

      area() {
         return this.altura * this.anchura;
      }
   }

   // Comenzamos a definir rectángulos usando este objeto como prototipo.

   const rect2 = Object.create(rectangulo);  // Clonamos el objeto.
   rect2.altura = 5;
   rect2.anchura = 6;

Esta, ciertamente, es una forma muy sucia de construir nuevos objetos utilizando
el prototipo, pero podriamos pulirla añadiendo un método constructor::

   const rectangulo = {
      crear(altura, anchura) {
         const self = Object.create(this);
         this.altura = altura;
         this.anchura = anchura;
         return self;
      },

      area() {
         return this.altura * this.anchura;
      }
   }

   const rect = rectangulo.create(5, 6);

Para implementar la herencia (por ejemplo, generar cuadrados) podemos tener en
cuenta que `Object.create`_ admite como segundo argumento un objeto que describa
propiedades adicionales del objeto a la manera que lo hace
`Object.defineProperties`_::

   const cuadrado = Object.create(rectangulo, {
      create: {
         value: function(lado) {
            return rectangulo.create.call(this, lado, lado);
         }
      }
   });

   const cua = cuadrado.crear(10);

.. _object.assign:

Ciertamente, es algo fea esta forma de derivar. Una alternativa es definir un
método para extender el objeto que podemos incluir en el objeto del que deriven
los demás\ [#]_::

   const rectangulo = {
      crear(altura, anchura) {
         const self = Object.create(this);
         this.altura = altura;
         this.anchura = anchura;
         return self;
      },

      extender(extension) {
         return Object.assign(Object.create(this), extension);
      },

      area() {
         return this.altura * this.anchura;
      }
   }
   
   const cuadrado = rectangulo.extender({
      crear(lado) {
         return rectangulo.crear.call(this, lado, lado);
      }
   });

Nótese que para implementar el nuevo método el ejemplo usa:

`Object.assign()`_
   Copia en el objeto proporcionado como primer argumentos, los atributos
   que contiene el objeto proporcionado como segundo argumento (y tercero y
   cuarto, etc.). Por tanto, el código::

      extender(extension) {
         const self = Object.create(this);
         return Object.assign(self, extension)
      }

   copia en objeto derivado de ``rectangulo`` (o sea, ``self`` los atributos
   definidos en ``extension``). La función, además, devuelve el objeto que se
   pasó como primer argumento, lo que aprovechamos para ahorrarnos una línea de
   código.

   Obsérvese que utilizando esta técnica el nuevo objeto ``cuadradp`` dispondrá
   de los atributos por dos vías:

   - Por :dfn:`delegación` (o sea, a través de su prototipo) de los atributos de
     cuadrado.
   - Por :dfn:`concatenación` (o sea, que acabarán copiados directamente sobre el
     propio objeto de los atributos del objeto ``extension``.

   Esto es importante, ya que la delagción implica que cualquier cambio en el
   objeto original (``rectangulo``) afectará al derivado, mientras que en la
   concatenación, al copiarse los atributos de ``extension`` en el nuevo objeto,
   no ocurre esto\ [#]_.

.. warning:: Como ya se formuló, hay bastantes voces críticas con el uso de la
   herencia para la reutilización de código. Revise la :ref:`composición
   <object-compos>` como alternativa.

Manipulación del prototipo
--------------------------
.. warning:: Alterar la cadena de prototipos afecta drásticamente al rendimiento
   de la aplicación, así que está muy desaconsejado.

Ya se ha dejado apuntado más arriba que todo objeto dispone de un atributo
``__proto__`` qu apunta al prototipo del objeto. Esta atributo es tanto de
lectura como de escritura, por lo que sirve tanto para consultar cuál es el
prototipo de un objeto como para cambiarlo. Sin embargo, en principio, fue una
extensión ajena al estándar que se aceptó en *ES2015* por compatibilidad
con los navegadores. La consulta y manipulación del prototipo debe hacerse con:

`Object.getPrototypeOf()`_
   Devuelve el prototipo del objeto.

`Object.setPrototypeOf()`_
   Cambia el prototipo del objeto.

Por ejemplo::

   const o = {x: 1};
   Object.getPrototypeOf(o) === Object.prototype; // true
   p = Object.create(o);
   p.y = 2
   Object.getPrototypeOf(p) === o; // true
   Object.setPrototype(p, Object.prototype);  // El prototipo de p ya no es o.
   p.x;  // undefined
   Object.getPrototypeOf(p) === Object.prototype; // true

.. _object-class:

"Clases" en *Javascript*
========================
La naturaleza real de la |POO| de *Javascript* es la ya expuesta: los objetos se
pueden construir añadiendo directamente atributos, y la herencia se basa en
prototipos. No obstante, por su diseño la |POO| de *Javascript* es tremendamente
verśatil y podemos emular en cierta media el estilo de programación de lenguajes
que tienen clases.

.. warning:: Recuérdese que, practicando lo expuesto bajo este epígrafe, al uso
   ya anatemizado por algunos de la herencia como mecanismo fundamental para la
   reutilización de código, se añade la introducción  del concepto de clases
   ajena a la naturaleza original de *Javascript*.

Método tradicional
------------------
Para poner en práctica esta aproximación a la |POO| debemos basarnos en el
concepto de :dfn:`función constructora` y el operador `new`_::

   function Rectangulo(altura, anchura) {
      this.altura = altura;
      this.anchura = anchura
   }

   const rect = new Rectangulo(10, 7);

En este caso ``Rectangulo`` es una función constructora que se caracteriza por:

1. Debe usarse utilizando el operador `new`_.
#. EL uso de tal operador provoca que el contexto (``this``) de la función sea
   el propio objeto que se esté construyendo y que implicitamente se devuelva
   tal objeto.
#. Que el atributo ``prototype`` de la función sea el prototipo del objeto
   generado. Por tanto, en este caso::
  
      Rectangulo.prototype === rect.__proto__

Como consecuencia de esto último para crear atributos comunes a todos los
objetos construidos con la función, es necesario añadirlos a
``Rectangulo.prototype`` (y si quisiéramos que fueran estáticos al propio
constructor). Así pues::

   function Rectangulo(altura, anchura) {
      this.altura = altura;
      this.anchura = anchura
   }

   const altura = Symbol('altura');

   Object.assign(Rectangulo.prototype, {
      area() {
         return this.altura * this.anchura;
      },
      // Otros atributos y métodos. Por ejemplo, getters y setters

      get altura() {
         return this[altura];
      },

      set altura(value) {
         this[altura] = value;
      }
   });

   // Atributos estáticos
   Object.assign(Rectangulo, {
      dimensiones: 2
   }):

   const rect = new Rectangulo(10, 7);
   rect.area();  // 70.
   rect.constructor === Rectangulo;  // true

Cuando se construyen objetos sobre una función, existe un atributo
``constructor`` cuyp valor es la propia función construcora.

.. note:: Construir objetos usando el operador `new`_ no casa excesivanente bien
   con la naturaleza funcional de *Javascript*. Sin embargo, es el método
   original (`Object.create`_ apareció bastante después), lo cual se debe en
   gran parte a la pretensión de *Ĵavascript* de aprovechar el entonces tirón de
   *Java* y del mismo modo que copió su nombre (su nombre original fue *Mocha* y
   luego *LiveScript*) también copió el operador `new`_ para crear objetos.

Es importante tener presente que al utilizar la función constructora, lo único
que se requiere utilizar es la propia función constructora. Consecuentemente, es
conveniente ocultar todas las definiciones, bien usando el :ref:`patron del
módulo <js-module-pattern>`, bien si estamos en *NodeJS* haciendo uso de un
`fichero independiente (módulo) <module-commonjs>`. El método del patrón podemos
ilustralo ahora porque no se requieren más conocimientos::

   const Rectangulo = (function() {
      function Rectangulo(altura, anchura) {
         this.altura = altura;
         this.anchura = anchura
      }

      const altura = Symbol('altura');

      Object.assign(Rectangulo.prototype, {
         area() {
            return this.altura * this.anchura;
         },
         
         // Otros atributos y métodos. Por ejemplo, getters y setters

         get altura() {
            return this[altura];
         },

         set altura(value) {
            this[altura] = value;
         }
      });

      // Atributos estáticos
      Object.assign(Rectangulo, {
         dimensiones: 2
      });

      return Rectangulo;
   })();

Si quisiéramos implementar otras funcionalidades de las clases:

- Los **atributos privados estáticos** pueden definirse como variables
  locales dentro de la clausura anterior, análogamente a como se ha definido
  la variable *altura*.

- Ciñéndonos exclusivamente a métodos, los **métodos privados de instancia**
  pueden implementarse como funciones definidas dentro de la clausura que se
  utilizan siempre definiendo al objeto como contexto. Por ejemplo:

  .. code-block:: javascript
     :emphasize-lines: 5, 8-12

      const Rectangulo = (function() {
         function Rectangulo(altura, anchura) {
            this.altura = altura;
            this.anchura = anchura
            comprobar.call(this);
         }

         function comprobar() {
            if(typeof this.altura !== 'number'  || typeof this.anchura !== 'number') {
               throw new TypeError(`Los lados del ${this.constructor.name} deben ser números`);
            }
         }

         // etc.
      })();

Por último para derivar clases, en realidad, debemos hacer que el constructor
del objeto derivado (``Cuadrado``) derive del constructor original
(``Rectangulo``). En consecuencia:

   .. code-block:: javascript
      :emphasize-lines: 5, 6

      const Cuadrado = (function() {
         function Cuadrado(lado) {
            Rectangulo.call(this, lado, lado);
         }
         Cuadrado.prototype = Object.create(Rectangulo.prototype);
         Cuadrado.prototype.constructor = Cuadrado;

         // Ahora podemos añadir más atributos al prototipo o al cnstructor.

         return Cuadrado;
      })();

      const cua = new Cuadrado(10);
      console.log(cua.area());  // 100.

La herencia, sin embargo, no es perfecta, ya que los *atributos estáticos*, esto
es, lo que hicimos colgar directamente del constructor no estarán disponibles,
ya que no hemos modificado el prototipo del propio constructor::

   cua.constructor.dimensiones  // undefined, en vez de 2.

.. note:: Podríamos corregir esto utilizando distintas alternativas:

   + Alterar el prototipo del constructor para que apunte al constructor padre
     (problemas de rendimiento).
   + Copiar con `Object.assign`_ los atributos del constructor padre (lo cual
     al ser una concatenación y no una delegación, provocaría que un cambio en
     el padre no se propague al hijo).

``class`` a partir de *ES2015*
------------------------------
Para satisfacer a los programadores procedentes de lenguajes donde sí existen
clases, a partir de 2015 *Javascript* introdujo una sintaxis para simplificar la
creación de clases, que realmente son funciones constructoras. La sintaxis tiene
la ventaja de solventar algunos problemas (como el de la herencia de métodos
estáticos), pero aleja aún más al programador de la herencia prototípica de
*Javascript*::

   class Rectangulo {
      constructor(altura, anchura) {
         this.altura = altura;
         this.anchura = anchura
      }

      static dimensiones = 2

      area() {
         return this.altura * this.anchura;
      }
   }

   class Cuadrado extends Rectangulo {
      constructor(lado) {
         super(lado, lado);
      }
   }

La sintaxis, conociendo la general de *Javascript*, es bastante sencilla. Al
ejemplo, habría que añadir:

* No pueden definirse métodos privados (aunque hay `una propuesta para el
  estándar <https://github.com/tc39/proposal-class-fields#private-fields>`_`).
* Dentro de los métodos, ``super`` hace referencia a la clase padre. En
  consecuencia, :kbd:`super(..args)` invoca al constructor y
  :kbd:`super.metodo(..args)` invoca un determinado método.
* Se usa la misma sintaxis que en los objetos para los *getters* y *setters*.
* No hay sintaxis para la herencia múltiple.

.. _object-compos:

Composición
===========

.. rubric:: Notas al pie

.. [#] No, no existen, ni siquiera a partir de *ES2015* donde aparece una
   sintaxis para *definir* clases. Abundaremos más adelante en esta aparente
   paradoja.

.. [#] Lo cual conseguiríamos en las |POO| basada en clases mediante herencia de
   clases.

.. [#] Que un atributo no sea *enumerable* no es equivalente a que, en la
   terminología de otros lenguajes, sea privado. El objeto, aun no siendo
   enumerable, seguirá siendo accesible desde fuera.

.. [#] De hecho, llevamos unos cuantos párrafos con unos cuantos ejemplo en que
   sólo hemos trabajado con objetos.

.. [#] Aunque, dada la naturaleza prototípica de la herencia en *Javascript*,
   esta es la forma natural de que un objeto herede de otro, `Object.create()`_
   fue introducida en *ES5* a `sugerencia de Douglas Crockford
   <https://crockford.com/javascript/prototypal.html>`_. La propia referencia
   contiene se podía implementar esta con el operador new_.

.. [#] Como comprenderemos más adelante todos los objetos derivan de
   ``Object.prototype`` por lo que podríamos añadirle esta método para poder
   extender cualquier objeto. No obstante, quizás no sea buena idea hacer
   definiciones que afecten de forma global.

.. [#] Obsérvese que si hubiéramos obrado así::

      extender(extension) {
         return Object.assign({}, this, extension);
      }

   tendríamos un ``cuadrado`` con los mismos atributos, pero no existiría
   delegación: tanto los atributos de ``rectangulo`` como atributos que
   extienden su definición se habrían copiado en el objeto resultante.
   Ciertamente, si estamos basando la reutilización del código en la herencia,
   es mejor la otra solución. La concatenación pura, sin embargo, la
   utilizaremos al exponer la :ref:`composición <object-compos>`.

.. |POO| replace:: :abbr:`POO (Programación Orientada a Objetos)`.
.. _Object.create(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
.. _new: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new
.. _Object.keys(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
.. _Object.defineProperty(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty
.. _Object.defineProperties(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties
.. _Object.values(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values
.. _Object.assign(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
.. _Object.getOwnPropertyNames(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames
.. _Object.getOwnPropertyDescriptor(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor
.. _Object.entries(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries
.. _Object.getPrototypeOf(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf
.. _Object.setPrototypeOf(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf
.. _.hasOwnProperty(name): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty
.. _for ... in: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in
.. _`__proto__`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto
.. _this: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this
.. _azúcar sintáctico: https://es.wikipedia.org/wiki/Az%C3%BAcar_sint%C3%A1ctico
