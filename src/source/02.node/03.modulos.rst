.. _js-modules:

Módulos
*******
Cuando se requiere programar una aplicación de mediano tamaño es indispensable
disponer de un mencanismo para encapsular el código, de modo que esta se
componga de una serie de módulos independientes que interrelacionan entre sí.
Solo muy recientemente *Javascript* ha facilitado mecanismos para llevar a cabo
esta tarea.

Expondremos aquí dos de los mecanismos para la definición y uso de módulos:

* CommonJS_, que es la base
  en la que se basa el sistema de módulos de `NodeJS`_.
* El sistema propuesto en el estándar ECMAScript2015 que tiene soporte
  experimental en NodeJS_, pero que es soportando sin problemas por
  :ref:`webpack <webpack>`.

Primero, sin embargo, describiremos qué se estructuraba el código antes de la
aparación de estos sistemas.

.. _js-module-pattern:

El *patrón del módulo*
======================
El *patrón del módulo* (y sus variantes) logran la encapsulación mediante el uso
de una función envolvente que actúa como clausura y que expone al exterior sólo
aquello que se desea hacer visible. Un ejemplo de este patrón (en realidad, de
su variante |RMP| o patrón del módulo revelado) es la siguiente:

.. code-block:: js

   var circunferencia = (function() {
      var default_r = 1;

      function calcLongitud(r) {
         if(r === undefined) r = default_r;
         return 2*Math.PI*r;
      }

      function calcArea(r) {
         if(r === undefined) r = default_r;
         return Math.PI*r**2;
      }

      return {
         calcLongitud: calcLongitud,
         calcArea: calcArea
      }
   })();

   console.log(circunferencia.calLongitud(10));

Este mismo patrón es el que usa se para encapsular la definición de una clase de
objetos a partir de su constructor:

.. code-block:: js

   var Persona = function() {

      // Constructor de objetos.
      function Persona(nombre, nacimiento, sexo) {
         this.nombre = nombre;
         this.nacimiento = nacimiento;
         this.sexo = sexo;
         this.defuncion = null;
      }

      Persona.prototype.matar = function(fecha) {
         this.defuncion = fecha;
      }

      Persona.prototype.estaMuerto = function() {
         return this.defuncion !== null;
      }

      // Se devuelve el constructor
      return Persona;

   }();

   pepe = new Persona("Pepe Monagas", "2000-01-01", "Varón");

La estrategia que se sigue es acoplar la definición (*circunferencia* o
*Persona* en nuestros ejemplos) al objeto global, que en el caso de un navegador
es el objeto `window
<https://developer.mozilla.org/en-US/docs/Web/API/Window>`_. De esta manera, la
definición esta disponible siempre en el resto del código.

.. _module-commonjs:

CommonJS
========
.. _webpack-import-path:

.. warning:: Tanto para este sistema como para el siguiente, obsérvese que al
   importar ficheros las rutas relativas se hacen siempre explícitas
   (:file:`./modulo.js` y no.  simplemente, :file:`modulo.js`). Esto es debido
   a que cuando no se hace explícita la ruta, el sistema sobreentiende que debe
   buscar el módulo el la ruta donde se instalan los módulos local o
   globalmente. Además, cuando se indica un directorio y no un fichero, se
   consulta en el directorio el fichero :file:`package.json` y se intenta cargar
   el fichero principal que en él se declare.

En el módulo, para hacer accesible a aquello que se desea exportar, basta con
usar :code:`exports`:

.. code-block:: js

   // circunferencia.js
   exports.calcLongitud = r => 2*Math.PI*r;
   exports.calcArea = r => Math.PI*r**2;

Y en el código invocante usar :code:`require` para acceder a lo exportado:

.. code-block:: js

   // main.js
   const circ = require("./circunferencia.js");

   console.log(circ.calcArea(10));

.. note:: Si no se expresa ruta, el módulo se busca en el directorio
   :file:`node_modules`.

Si el módulo es más complejo, posiblemente requiera varios ficheros y su propio
directorio. En ese caso, basta con que lo exportable se encuentre en el fichero
:file:`index.js` del directorio:

.. code-block:: none

   +-- circunferencia
            +-- index.js

Además puede encontrarse en cualquier localización, si se añade al
:file:`package.json` el atributo *main*:

.. code-block:: js

   "main": "lib/index.js"

Con lo cual el módulo podría ser así:

.. code-block:: none

   +-- circunferencia
            +-- package.json
            +-- lib
                 +-- index.js

Cuando se desea exporta desde un módulo un objeto único ha de tenerse encuenta
una cosa muy importante :code:`require` devuelve el valor de
:code:`module.exports`, no de :code:`exports`, aunque en nuestro ejemplo hayamos
añadido atributos al objeto :code:`exports`. Lo que ocurre es que inicialmente
:code:`module.exports` y :code:`exports` apuntan al mismo objeto. Por tanto, si
se quiere exportar un objeto debe usarse :code:`module.exports`:

.. code-block:: js

   // circunferencia.js
   module.exports = {
      calcLongitud: r => 2*Math.PI*r,
      calcArea: r => Math.PI*r**2
   }

.. _module-es2015:

ECMAScript2015
==============
.. warning:: El estándar propuesto en ES2015 es soportado experimentalmente por
   NodeJS_ y requiere dos cosas:

   - Que la extensión de los ficheros sea :code:`.mjs`, no :code:`.js`.
   - Ejecutar con el argumento :code:`--experimental-modules`:

     .. code-block:: console

        $ nodejs --experimental-modules script.mjs

La principal característica del estándar es que, a diferencia del sistema
anterior que sirve únicamente para programación en el lado del servidor, éste
funciona también en los navegadores (`muy modernos
<https://caniuse.com/#feat=es6-module>`_, eso sí).

Lado del servidor
-----------------
En el módulo se exporta lo que se precisa mediante la palabra :code:`export`:

.. code-block:: js

   // circunferencia.mjs
   export const PI = Math.PI;

   export function calcLongitud(r) {
      reutrn 2*PI*r;
   }

   export function calcArea(r) {
      return PI*r**2;
   }

Y en el código invocante, dene usarse :code:`import` del siguiente modo:

.. code-block:: js

   // main.mjs
   import * as circ from "./circunferencia.mjs"

   console.log(circ.calcLongitud(4));
   console.log(circ.calcArea(3));

También puede exportarse al espacio de nombres del código principal:

.. code-block:: js

   // main.mjs
   import {PI, calcLongitud, calcArea} from "./circunferencia.mjs"

   console.log(calcLongitud(4));
   console.log(calcArea(3));

A la vez que se importa, se puede cambiar de nombre:

.. code-block:: js

   import {PI as pi, calcLongitud, calcArea} from "./circunferencia.mjs"

Al exportar es posible también declarar primero lo exportable y usar luego
:code:`export`:

.. code-block:: js

   // circunferencia.mjs
   const PI = Math.PI;

   function calcLongitud(r) {
      reutrn 2*PI*r;
   }

   function calcArea(r) {
      return PI*r**2;
   }

   export {PI, calcLongitud, calcArea}

Además es posible importar por defecto una función anónima:

.. code-block:: js

   // Módulo modulo.mjs
   export funcion doble(x) {
      return 2*x;
   }
   export default x => x/2;

En este caso, se puede dar un nombre cualquier en el código invocante a la
definición:

.. code-block:: js

   import mitad from "./modulo.mjs";


y si se quiere importar también el resto de definiciones:

.. code-block:: js

   import mitad, {doble} from "./modulo.mjs";

Si el módulo lo compone un directorio, es aplicable todo lo explicado para
CommonJS_.

.. note:: Cuando la carga de un módulo no exporta nada, puede usarse la
   sintaxis:

   .. code-block:: js

      import "./modulo_sin_export.mjs"

Lado del cliente
----------------
Para el cliente los ficheros se escriben exactamente de la misma forma y se
cargan en el navegador así:

.. code-block:: html

   <script type="module" script="main.mjs"></script>
   <script nomodule script="fallback.js"></script>

En un navegador moderno el código anterior cargará :file:`main.mjs` (el cual a
su vez será capaz de cargar :file:`circunferencia.mjs`) y saltará el siguiente
elemento, puesto que tiene el atributo *nomodule*. En un navagador no tan
moderno, en cambio, se cargarán ambos *scripts*, el primero de los cuales
fallará, por lo cual podrá usarse el segundo para implementar lo que en
principio debería haber hecho el primero.

.. note:: Si escribimos módulos para el cliente, es totalmente lícita la
   siguiente carga:

   .. code-block:: js

      import * as circ from "https://server.com/js/circunferencia.mjs"

.. note:: Los módulos se ejecutan en diferido, esto es, una vez que se ha
   completado la carga de la página. En cambio, en un navegador antiguo, que no
   entiende de módulos, el segundo *script* se ejecutará inmediatamente después
   de haberse cargado, con lo cual es muy probable que nos interese indicar
   explicitamente que la ejecución debe hacerse en diferido:

   .. code-block:: html

      <script nomodule defer script="fallback.js"></script>

En cualquier caso, lo habitual cuando se escribe código para el navegador no es
hacer uso de un código modular, que obliga a realizar varias peticiones al
servidor, tantas como módulos compongan la aplicación, sino convertir el código
fuente modular en otro compacto que, además, será válido para navegadores sin
soporte para módulos. Se tratará de ello, al :ref:`exponer la programación para
clientes <webpack>`.

Otros sistemas
==============
|AMD|
-----
Este sistema permite la carga asíncrona de módulos (a diferencia de CommonJS_).
La definición de un módulo que depende de JQuery_ y Leaflet_ se llevaría a cabo
así:

.. code-block:: js

   define(["jquery", "leaflet"], function($, L) {
      // Aquí la implementación del módulo

      function fn1() {
         // Implementación de la función
      }

      const c = 12;

      // Esto es lo exportable
      return {
         fn1: fn1,
         c: c
      }
   });

.. _mod-umd:

|UMD|
-----
|UMD| no es, en realidad, otro sistema de módulos, sino un patrón de
programación que permite cargar código cuando el intérprete soporta uno de estos
tres sistemas:

* CommonJS_.
* |AMD|.
* El método tradicional mediante un atributo ligado al objeto global.

El patrón no es demasiado estético, pero funciona. Supongamos que tenemos un
módulo que depende de JQuery_ y Leaflet_. Supongamos, además, que nuestra
intención es que esté accesible a través del nombre "MiLibreria" y que:

- Si el intérprete soporta CommonJS_ las dependencias se cargan a través de los
  nombres "*jquery*" y "*leaflet*" respectivamente.
- Si soporta |AMD|, otro tanto.
- Si usa el método tradicional están disponibles a través de las objetos ``$`` y
  ``L`` (en realidad, ``window.$`` y ``window.L``).

En estas condiciones el patrón se implementa así:

.. code-block:: js

   (function (global, factory) {
       if (typeof define === "function" && define.amd) {
           define(["jquery", "leaflet"], factory);
       } else if (typeof exports === "object") {
           module.exports = factory(require("jquery"), require("leafter"));
       } else {
           global.MiLibreria = factory(global.$, glonal.L);
       }
   }(this, function ($, L) {
      // Implementación del módulo (usando $ y L)

       return resultado;
   }));

Como se aprecia, el patrón prueba si el intérprete soporta CommonJS_, si no es
el caso, prueba si soporta |AMD|; y, si tampoco, exporta el resultado del módulo
mediante la variable global *MiLibreria*.

Lo interesante de este patrón es que permite usar el código tanto cargado
directamente desde un navegador no muy reciente, como usarlo como componente en
un desarrollo con NodeJS_. Por esa razón, es el formato que suele usarse para la
:ref:`creación de librerías <webpack-ej-plugin>` en la programación en el
cliente..

.. rubric:: Enlaces de interés

* `¿Qué son los módulos de Javascript
  <https://programacionymas.com/blog/modulos-javascript-commonjs-amd-ecmascript>`_

* `What is AMD, CommonJS, and UMD?
  <https://www.davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/>`_

* `Introduction to ES Modules
  <https://flaviocopes.com/es-modules/#what-about-browsers-that-do-not-support-modules>`_

* `JavaScript modules <https://v8.dev/features/modules>`_

.. rubric:: Notas al pie

.. |RMP| replace:: :abbr:`RMP (Revealing Module Patron)`
.. |AMD| replace:: :abbr:`AMD (Asynchronous Module Definition)`
.. |UMD| replace:: :abbr:`UMD (Universal Module Definition)`


.. _Leaflet: https://leafletjs.com
.. _JQuery: https://jquery.com
.. _CommonJS: https://nodejs.org/docs/latest/api/modules.html
.. _NodeJS: https://nodejs.org
