Funciones
*********
Las funciones en *Javascript* tiene algunas particularidades que conviene
conocer.

Sintaxis
========
Hay dos formas de definir funciones:

* La **tradicional**::

     function suma(arg1, arg2) {
         // Implementación...
         return arg1 + arg2;
     }

* A partir de *ES2015*, la **función flecha**::

   (arg1, arg2) => {
      // Implementación...
      return arg1 + arg2;
   }

 En caso de que la función conste de una única sentencia podemos simplificar la
 construcción eliminado las llaves y la sentencia :code:`return`::

   (arg1, arg2) => arg1 + arg2

.. note:: Si se quiere devolver un objeto, entonces es forzoso encerrarlo entre
   paréntesis para evitar ambigüedad::

      (name), desc) => ({name: name, description: desc})

Las funciones flecha no expresan el nombre, pero podemos asignarlas a un
identificador (como por otro lado también puede hacerse con las funciones
anónimas en sintaxis tradicional)::

  // Función flecha asociada a un identificador.
  var suma = (arg1, arg2) => arg1 + arg2;

  // Una forma más enrevesada de definir la primera función:
  var suma = function(arg1, arg2) {
     return arg1 + arg2;
  }

Las funciones flecha no son simple `azúcar sintáctico
<https://es.wikipedia.org/wiki/Az%C3%BAcar_sint%C3%A1ctico>`_, sino que hay
una diferencia capital entre ellas y las funciones tradicionales: no crean un
contexto de ejecución propio, sino que heredan el contexto externo. Por
ejemplo::

   function uno(a, b) {
      const [args, that] = [arguments, this]

      var dos1 = function(x) {
         console.log("Tradicional", this === that, arguments === args);
      }
      var dos2 = (x) => console.log("Flecha", this === that, arguments === args);

      dos1(b);  // Tradicional, false, false
      dos2(b);  // Flecha, true, true
   }

   uno.call({desc: "Soy el contexto"}, 1, 2);


Si ejecutamos el ejemplo, la función tradicional *dos1* generará un nuevo
contexto (this_ distinto y argumentos propios), mientras que la función flecha
*dos2* no lo hace.

Argumentos
==========
Los argumentos de las funciones son posicionales, pero con algunas
características especiales:

* *Javascript* no es estricto con el número de parámetros proporcionados. Si se
  pasan más de los que se definieron, no se producirá ningún fallo::

   const sum = (a, b) => a + b;
   sum(1, 2);       // Devuelve 3.
   suma(1, 2, 10);  // Sobra el 10, pero sigue devolviendo 3.

* Si se pasan menos parámetros de los declarados, los parámetros restantes
  tomarán el valor ``undefined``.

* Desde *ES2015* pueden definirse valores predeterminados::

   const sum = (a = 10, b = 100) => a+b;
   sum(20);               // 100 + 20 = 120.
   suma(undefined, 200);  // 200 + 10 = 210.
   suma();                // 100 + 10 = 110.

 Antes, no obstante, era también bastante sencillo de implementar::

   function suma(a, b) {
      if(a === undefined) a = 10;
      if(b === undefined) b = 100;

      return a + b;
   }

* Las funciones disponen de un pseudo-array denominado arguments_ que contiene
  el valor de cada uno de los argumentos::

   function sum(a, b) {
      console.log(arguments[0]) // valor de a.
      console.log(arguments[1]) // valor de b.
      return a + b;
   }

  :code:`arguments` no es un array propiamente dicho y sólo permite recorrerlo,
  acceder por posición a sus elementos y consultar su longitud con ``length``.
  En modo no estricto, dispone además de un atributo ``callee`` que refiere la
  propia función::

   function sum(a, b) {
      console.log(sum === arguments.callee);  // true.
      return a + b;
   }

* A partir de *ES2015*, es posible también definir funciones con una cantidad
  fija de argumentos nominados, y otra variable::

   function foobar(a, b, ...rest) {
      console.log(a);      // 1
      console.log(b);      // 2
      console.log(rest);   // [3. 4]
   }

   foobar(1, 2, 3, 4);

Contexto
========

this_ predeterninado
--------------------

El objeto this_ del contexto ejecución que crea cada función depende de
múltiples factores:

- En las *funciones flecha* se conserva el del entorno externo.
- En funciones independendientes::

   function foobar() {
      console.log(this);  // Objeto global o undefined.
   }

  depende del modo: en modo estricto queda indefnido (``undefined``), mientras
  que en otro caso, es el objetp global.

- En métodos de un objeto, representa al propio objeto::

   const objeto = {a: 1, b: 2, c: 3};

   objeto.foobar = function() {
      console.log(this.a);
   }

   objecto.foobar();  // Imprime 1.

   // Pero:

   foobar2 = objeto.foobar;

   foobar2();  // Imprime undefined en modo estricto (error en otro caso).

  .. note:: Una función también podemos considerarla un objeto:

     .. code-block:: js

        function ABC() {}
        ABC.a = 1;

        ABC.foobar = function() {
           console.log(this.a);
        }

        ABC.foobar();  // Imprime 1.
   
- Y aunque se entenderá al tratar el :ref:`modelo de objetos <object-model>`,
  dentro de las funciones constructoras y en los métodos del prototipo de dicho
  constructor, this_ representa al propio objeto::

   // Constructor
   function Foobar(a) {
      this.a = a;
   }

   Foobar.prototype.metodo = functioN() {
      console.log(this.a);
   }

   const objeto = new Foobar(1);  // Se asigna 1 a objeto.a;
   objeto.metodo();               // Imprime 1.

Manipulación de this_
---------------------
Aunque lo establecido bajo el epígrafe anterior son los valores que adquiere
this_ dependendiendo de cómo se haya definido la función, es posible alterar
dinámicamente el contexto a través de diversas herramientas. Para ilustrarlas
tomemos de ejemplo la función::

   function foobar(x, y) {
      console.log("this". this);
      console.log(x, "--", y);
   }

`.bind()`_
   Permite crear una nueva función en que se definen de antemano el objeto this_
   y todos los argumentos que se le proporcionen::

      const barfoo = foobar.bind({}, 1);  // Proporcionamos this y el primer argumento.
      barfoo(2);                          // this= {}; x= 1; y= 2.

   .. note::  ``.bind()`` puede cumplir la función que hace `partial
      <https://docs.python.org/3.7/library/functools.html#partial-objects>`_ en
      *Python*, aunque tiene el efecto añadido de modificar el objeto
      this_. Para una solución que no lo modifique puede usarse el
      siguiente código::

         const partial = (func, ...args) => (...rest) => func(..args, ...rest);

`.call()`_
   Ejecuta la función permitiendo modificar el objeto this_, que pasa a
   ser el primer argumento::

      foobar.call({}, 1 2):  // this= {}; x= 1; y= 2.

`.apply()`_
   Actúa como ``.call()`` modificando el objeto this_, pero pasa el resto
   de argumentos en forma de *array*::

      foobar.apply({}, [1, 2]);  // this= {}; x= 1; y= 2.

.. note:: Las definiciones hechas con :code:`.bind()` provocan que quede anulado
   el efecto de ``.call()`` y ``.apply()``.

.. _arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
.. _.bind(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
.. _.call(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call
.. _.apply(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply
.. _this: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this
