Variables
*********
Declaración
===========
Hay tres modos de declarar variables::

   var x = 2;
   let z = 4;
   const Y = 3;

La primera forma es la única que ha existido tradicionalmente; mientras que la
segunda y la tercera se introdujeron en *ES2015*. La última forma permite
definir constantes y requiere obligatoriamente declarar cuál es el valor
asignado. Las otras dos, en cambio, pueden declararse sin recibir valor. En tal
caso, su valor es :code.`undefined`, hasta que no se le asigne un valor.

Por otra parte, en *Javascript* las funciones son ciudadanas de primera clase.

Hay otra diferencia capital entre estas tres declaraciones relacionada con su
ámbito de existencia: las declaradas con :code:`var` tiene como ámbito la
función dentro de la que se definen, mientras que las declaradas con :code:`let`
y :code:`const` el bloque. Se profundizará más adelante en ello.

.. _decl-no-var:

Cuando se lleva a cabo una asignación, sin haber hecho una declaración previa
pueden ocurrir dos cosas:

- En modo *estricto*, se produce un error.
- En otro caso, la variable pasa a ser un atributo del :ref:`objeto global
  <objeto-global>`.

Tipos
=====
*Javascript* define los siguientes tipos:

* Tipos primitivos:

  * Lógico (``true`` o ``false``).
  * Cadena.
  * Numérico (número en coma flotante de doble precisión). No hay soporte nativo
    para enteroes.
  * Nulo (``null``).
  * Indefinido, sin valor (``undefined``).
  * Símbolo: es un tipo que sirve para definir valores únicos. Puede usarse como
    como clave para las propiedades de los objetos::

      const s = Symbol();
      const objeto = {};
      objeto[s] = "La clave es un símbolo";

* Objetos:

  * `Array
    <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array>`_::

      const arr = [1, 2, 3];

  * `Fecha
    <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date>`_::

      const ahora = new Date();

  * `Funciones
    <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function>`_.

  * Objetos equivalentes a los datos primitivos (como en *Java*)::

      const s = new String("abc");
      const n = new Number(12);
      const b = new Boolean(true);

  * Objetos en general::

      const o = {};

Contexto de ejecución
=====================
El :dfn:`contexto de ejecución` es, simplemente, el contexto en que se ejecuta
una determinada parte del código. En *Javascript* hay un contexto global y cada
función crea su propio contexto de ejecución::

   // Contexto global
   var a = 1;

   function f1() {
      // Contexto de f1
      var b = 2;
      f2();
      console.log("Dentro del contexto de f1");
   }

   function f2() {
      // Contexto de f2
      var c = 3;
      console.log("Dentro del contexto de f2");
   }

   f1();

En el caso de los contextos de ejecución se habla de :dfn:`pila de contextos`,
ya que al comenzar el programa se crea el contexto global, al invocarse la
función :code:`f1()` se crea un contexto para esta función, dentro de la cual se
invoca a la función :code:`f2()` lo que provoca la creación de otro contexto. Al
salir de esta última función se destruye este contexto y volvemos al contexto de
la función :code:`f1` y al acabar esta, regresamos al contexto global, el cual
se destruye al acabar el programa. Obsérvese que la *pila de contextos* depende
de por dónde se desarrolle la ejecución.

Es preciso puntualizar que cuando existen diferentes ficheros, el
comportamientdo difiere dependiendo de cuál sea el interprete:

- En los navegadores, todos los ficheros comparten el mismo contexto que es un
  contexto glonal, por lo que si nen el nivel superior definimos::

   var x = 2;

  estaremos haciendo exactamente lo mismo que\ [#]_::

   window.x = 2


- En NodeJS_, en cambio, al ser cada fichero un módulo distinto, cada fichero
  tiene su contexto particular.

Cada vez que se crea un contexto, el intérprete establece tres cosas:

- Un entorno léxico (*lexical environment*).
- Un entorno de variable (*variable environment*).
- Un objeto this_.

Entornos
========
Al crearse un nuevo contexto de ejecución se crean un entorno léxico y un
entorno de variable que, en principio, son idénticos. Cada entorno recoge la
declaración de variables y funciones y una referencia al entorno externo. En
consecuencia, en el entorno de la función ``f2()``, tenemos acceso a la variable
``c``, pero también a la ``b`` y a la ``a``, ya que cuando un identificador no
se encuentra en el propio entorno se sigue buscando en el entorno externo y, si
tampoco se encuentra en este se busca en el externo del externo y así
sucesivamente hasta llegar al entorno global, cuyo entorno externo es
:code:`null`. Esto define una :dfn:`cadena de alcances`. Por la misma razón, si
en un entorno interno se define una variable con el mismo nombre que en un
entorno externo, la variable externa queda eclipsada, ya que nunca se consultará
su valor al haberse encontrado antes en la *cadena de alcances*. Obsérvese que
la *cadena de alcances* depende de cómo esté escrito el código, no de cómo se
ejecute.

Afinando más, un entorno está constituido por:

- Una referencia al entorno externo (que es lo que posibilita la *cadena de
  alcances*).
- Un registro de ambiente que mapea identificadores con valores. Tal registro
  tiene dos clases de registros:

  + Los registros declarativos del entorno para las declaraciones de variables y
    funciones llevadas a cabo en el entorno.
  + Los registros de objeto del entorno que se usan con la sentencia with_ y
    para el entorno global. Por esta razón, las definiciones hechas sobre el
    :ref:`objeto global <objeto-global>` siempre están disponibles.

Ya hemos indicado que en un principio, los entornos léxico y de variables son
idénticos en un *contexto de ejecución*. Cuándo y por qué divergen es fácil de
entender con un ejemplo::

   function foobar() {
      var a = 1;

      {
         var b = 2;
         let c = 3;
      }

   }

Ya se indicó que el ámbito de las variables declaradas con ``var`` es la
función, mientras que la de las definidas con ``let`` (o  ``const``) es el
bloque. En consecuencia, ``b``, aunque definida dentro del bloque, existe
fuera de él. De hecho, *Javascript* opera de manera que traslada siempre las
declaraciones de las variables (aunque no la asignación) al comienzo de su ámbito,
por lo que ``b`` antes del bloque existe, aunque está indefinido::

   function foobar() {
      var a = 1;

      // Aquí existe b pero vale undefined.

      {
         var b = 2;
         let c = 3;
      }

      // Aquí b vale 2.

   }

``c``, en cambio, sólo existe dentro del bloque. La forma que usa el intérprete
para implementar esto es la de apuntar ``b`` en el entorno de variables, pero
``c`` en el entorno léxico. Por tanto, dentro del bloque el entorno de variables
y el entorno de variables difiere.

.. _objeto-global:

Objeto global
=============
:dfn:`Objeto global` es aquel que las definidas que pertenecen al alcance global.
En un navegador el objeto global es *window*.

.. note:: Recuérdese que en modo **no estricto**, las asignaciones sin
   declaración se definen como variables globales, esto es, pasan a formar parte
   del objeto global.

Objeto this_
============
Cada contexto de ejecución tiene asociado un objeto this_. Es importante tener
presente que el significado de this_ en *Javascript* es mucho amplio del que
tiene comúnmente en lenguajes orientados a objetos como *Java* o *Python*
(aunque en este se pueda llamar de cualquier manera). En estos lenguajes, this_
representa al objeto mismo dentro de sus propios métodos. Por eso, en *Python*
podemos escribir:

.. code-block:: python

   class Rectangulo:

      def __init__(self, x, y):
         self.width = x
         self.height = y

      def area(self):
         return self.width*self.height;

En *Javascript*, tiene este significado (que se tratará al tratar el
:ref:`modelo de objetos <object-model>`), pero no exclusivamente, ya que
cualquier contexto de ejecución tiene definido un objeto this_.

En el contexto global, el valor de this_ es:

- El objeto global (o sea, *window*) en los navegadores. Además, los contextos
  globales de todos los ficheros de código son exactamente el mismo.

- En NodeJS_. en cambio, cada fichero tiene un contexto diferente y el valor de
  this_ coincide con el objeto de importación (en caso de que se use
  *CommonJS*)::

      exports.a = 1;
      let b = 2;

      console.log(this);  // {a: 1}

      function c() {
         console.log("Soy una función");
      }

      exports.c = c;

      console.log(this);  // {a: 1, c: [Function: c]}


   .. seealso:: A su debido tiempo. requerirá echarle un ojo a los :ref:`módulos
      en Javascript <js-modules>`.

La discusión sobre el valor de this_ dentro de las funciones, la incluiremos
bajo el próximo epígrafe.


.. rubric:: Notas al pie

.. [#] Ya veremos que en un navegador el objeto global es *window*, de ahí la
   equivalencia.

.. _NodeJS: https://nodejs.org
.. _with: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with
.. _this: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this
