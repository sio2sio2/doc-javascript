.. _webpack-ejemplos:

Ejemplos
********
Los ejemplos de aplicación los construiremos en torno a  Leaflet_, la excelente
librería |GIS| y trataremos tres casos:

#. La creación de una aplicación web final que use un plugin previo.

#. La creación de este plugin previo, que incluye un código de ejemplo que sirve
   para depurar durante el desarrollo.
  
 Aunque cronológicamente deberíamos obrar al revés, la creación de una
 aplicación web es menos compleja, de modo que empezaremos por ella.

.. _webpack-ej-app:

Aplicación web
==============
El primer ejemplo ilustra cómo crear una aplicación web muy sencilla que utiliza
Leaflet_ y el *plugin* para éste que expondremos en el segundo ejemplo y se
llama `Leaflet.iconzoom`_.

Al tratarse de una aplicación final, sólo no es necesario configurar dos
*sabores* para la salida de los cinco qu expusimos al tratar las :ref:`múltiples
salidas <webpack-multi>`:

2. El optimizado y portable para producción, que incluirá todas las
   dependencias.

5. El apropiado para la depuración durante el desarrollo.

Preparativos
------------
#. Generamos el directorio de trabajo:

   .. code-block:: console

      $ mkdir test.iconzoom
      $ cd test.iconzoom
      $ npm init -y

   y nos cercioramos de dejar los scripts de :file:`package.json` de este modo:

   .. code-block:: js

      "scripts": {
        "build": "webpack --env.output=bundle --progress",
        "debug": "webpack-dev-server --env.output=debug --progress"
      }

   que es, precisamente, como los deja el fichero :file:`~/npm-init.js` que
   propusimos lecciones atrás.

#. Instalamos el *software* preciso:

   .. code-block:: console
   
      $ npm install --save-dev webpack webpack-dev-server webpack-cli webpack-merge

      $ npm install --save-dev babel-loader @babel/core @babel/cli @babel/preset-env
      $ npm install core-js

      $ npm install --save-dev html-loader html-webpack-plugin

      $ npm install --save-dev css-loader mini-css-extract-plugin
      $ npm install --save-dev postcss-loader autoprefixer cssnano
      $ npm install --save-dev sass-loader node-sass

      $ npm install --save-dev url-loader file-loader
      $ npm install leaflet-defaulticon-compatibility

      $ npm install leaflet
      $ npm install git+https://github.com/sio2sio2/leaflet.iconzoom.git

   en donde:

   * El primer bloque instala los paquetes relacionados con webpack.
   * El segundo instala los paquetes necesarios para la transpilación.
   * El tercero, los necesarios para procesar el |HTML| de la aplicación.
   * El cuerto, los necesarios para procesar |SASS|/|CSS|, minimizar y generar
     un único fichero.
   * El quinto, los necesarios para procesar otro tipo de ficheros.
     `leaflet-defaulticon-compatibility`_. El últumo es imprescindible si que
     quiere que no fallen los dataURI que genera :program:`url-loader`.
   * El sexto y último bloque son las librerías externas de las que depende
     nuestro programa.

Escritura
---------

#. Creamos la sencilla aplicación:

   .. code-block:: none

      + src
         +-- index.html
         +-- index.js
         +-- index.sass
         +-- logo.svg

   que consta de:

   a. La página :download:`src/index.html <files/page/index.html>`:

      .. literalinclude:: files/page/index.html
         :language: html

      que es la página cruda sin enlaces a Leaflet_, el plugin anterior o el
      *script* que crea el mapa.

   b. Un estilo (con |SASS|) en :download:`src/index.sass <files/page/index.sass>`:

      .. literalinclude:: files/page/index.sass
         :language: sass

   c. Y el propio *script* :download:`src/index.js <files/page/index.js>`:

      .. literalinclude:: files/page/index.js
         :language: js

      Al ser una aplicación final, no necesitamos generar salidas sin
      dependencias y, en consecuencia, importamos todas directamente en el
      propio código.

#. Por fin, creamos la configuración para :program:`webpack` 

   .. literalinclude:: files/page/webpack.config.js
      :language: js

   que presenta las siguientes claves:

   * La traspilación no es necesaria para durante el desarrollo ya que se supone
     que disponemos de un navegador moderno. En cambio, si necesitamos
     configurar el servidor web. Por eso motivo hemos independizado ambas
     configuraciones en funciones aparte y usamos una u otra según nuestro
     propoósito.

   * El resto de la configuración es común a las dos salidas.

   * Generamos la aplicación en el subdirectorio :file:`/docs`.

Generación
----------
#. Generamos el resultado:

   .. code-block:: console

      $ npm run build

#. Por último, se remata y publica el repositorio:

   .. code-block:: console

      $ vim README.rst
      $ vim LICENSE
      $ git add --all .
      $ git commit -m "Primera implementación"

      $ git remote add origin https://github.com/sio2sio2/test.iconzoom.git
      $ git push -u origin master

   .. note:: Para que el ejemplo sea visitable, en Github_ dentro de *Settings*,
      habilite la publicación del directorio :file:`/docs` de la rama *master*.

El resultado está publicado en `este su repositorio
<https://github.com/sio2sio2/test.iconzoom>`_.

.. _webpack-ej-plugin:

Plugin
======
Nuestra intención ahora es desarrollar una librería, no una aplicación final, y
en concreto, el *plugin* que utilizamos bajo el epígrafe anterior para construir
la aplicación, o sea, `Leaflet.iconzoom`_.

En este caso, queremos obtener las :ref:`cinco salidas expuestas al tratar el
asunto <webpack-multi>` y, además, escribir un ejemplo que sirva tanto para
ilustrar su uso como para depurar mientras lo desarrollamos.

Preparativos
------------
#. Generamos el directorio de trabajo:

   .. code-block:: console

      $ mkdir leaflet.iconzoom
      $ cd leaflet.iconzoom
      $ npm init -y

   en el que el fichero prinicpal será :file:`dist/leaflet.iconzoom-src.js`; y
   nos cercioramos de dejar los scripts de :file:`package.json` de este modo:

   .. code-block:: js

      "scripts": {
         "build": "webpack --env.output=min --progress",
         "build:bundle": "webpack --env.output=bundle --progress",
         "build:src": "webpack --env.output=src --progress",
         "build:debug": "webpack --env.output=srcdebug --progress",
         "debug": "webpack-dev-server --env.output=debug --progress"
      }

#. Instalación del software preciso:

   .. code-block:: console
   
      $ npm install --save-dev webpack webpack-dev-server webpack-cli webpack-merge

      $ npm install --save-dev babel-loader @babel/core @babel/cli @babel/preset-env
      $ npm install core-js

      $ npm install --save-dev css-loader mini-css-extract-plugin
      $ npm install --save-dev postcss-loader cssnano

      $ npm install --save-dev url-loader file-loader
      $ npm install leaflet-defaulticon-compatibility

      $ npm install leaflet

   En este caso, más que exponer de nuevo para qué sirve cada bloque,
   justifiquemos las diferencias con respecto al caso anterior:

   * Hemos prescidido del bloque dedicado al procesamiento de |HTML|, porque
     nuestra librería no lo necesita:
    
   * Procesamos, obviamente, *Javascript* (el propio y el de Leaflet_), |CSS|
     (el de Leaflet_ en el sabor *bundle*) e imágenes (alguna de Leaflet_
     referidas en su |CSS|).

   * Prescindimos de *autoprefixer*, porque no añadimos |CSS| propio y estimamos
     que el |CSS| de Leaflet ya será suficientemente compatible. Podemos, sin
     embargo, instalarlo y usarlo en la configuración.

Escritura
---------
#. Escribimos el *plugin* en :file:`src/plugin.js`, que es enormemente sencillo:

   .. literalinclude:: files/plugin/plugin.js
      :language: js

#. Desarrollamos el ejemplo. Tomaremos como base la aplicación anterior, pero
   teniendo en cuenta que el ejemplo no forma parte del procesamiento  por
   lo que escribiremos los ficheros finales y los alojaremos en el subdirectorio
   :file:`examples`\ [#]_:

   .. code-block:: none

      + examples
         +-- index.html
         +-- index.js
         +-- index.css
         +-- logo.svg

   Las diferencias de estos ficheros respecto a los que escribimos para la
   aplicación anterior son:

   * El |CSS| es |CSS| y no |SASS|, puesto que no debe haber procesamiento
     anterior. Salvado el formato, el contenido es el mismo.

   * :file:`index.html` debe contener los enlaces a todo el |CSS| y *Javascript*
     necesario. En consecuencia:

     .. literalinclude:: files/plugin/index.html
        :emphasize-lines: 6-15
        :language: html

     En este caso, estamos usando el resultado sin dependencias, por lo que es
     necesario incluir también las referencias a Leaflet_.

   * El *script* :download:`index.js <files/plugin/index.js>` es el expuesto al
     desarrollar la aplicación, pero sin las sentencias de importación y
     exportación.

#. Por último, redactamos :file:`webpack.config.js`. Esta configuración es más
   compleja que la anterior, puesto que codifica la generación de las cinco
   salidas diferentes.

   .. literalinclude:: files/plugin/webpack.config.js
      :language: js
      :emphasize-lines: 34-41, 45-62, 74-79, 118-123

   Aunque más compleja, la configuración no presenta demasiadas diferencias:

   - Las antes inexistentes funciones ``confBundle()`` y ``confNoDeps()``
     responden a la necesidsad de crear sabores con o sin dependencias. La
     primera función añade el |CSS| externo (que antes se importaron
     directamente en el código *Javascript*), mientras que la segunda usa
     :ref:`externals <webpack-externals>` para referir las librerías de terceros
     no incluidas.

   - Configuramos de distinto modo el servidor web de depuración para que se
     sirvan en :file:`/` los ficheros contenidos en :file:`examples`, los
     ficheros generados se compartan en :file:`dist`. Esta argucia permite que
     los enlaces al |CSS| y al *Javascript* funcionen tanto al depurar como al
     visitar el |HTML| en cualquier otro momento. Además, se pide que se vigilen
     los cambios en :file:`examples` a fin de que durante la depuración se
     puedan ahcer cambios en los propios ficheros que componen el ejemplo y
     veamos el efecto reflejado inmediatamente.

   - Nos preocupamos de cómo sea la salida (*output*), aunque el *plugin* altera
     un objeto global (**L** de Leaflet_) queremos que pueda usarse como
     componenente al desarrollar una aplicación (como la del primer ejemplo).
     Por ello, hemos generado un módulo |UMD|.

Generación
----------

.. rubric:: Notas al pie

.. [#] Esta aparente excentricidad tiene una explicación totalmente ajena a la
   aplicación en sí: entre otras alternativas, Github_ permite publicar el
   contenida del directorio :file:`/docs`, así que hay se almacena el resultado
   para que éste se publique en la dirección
   `https://sio2sio2.github.io/test.iconizoom <https://sio2sio2.github.io/test.iconizoom>`_

.. [#] La elección no es arbitraria: es el directorio donde la `Guía de Leaflet
   <https://leafletjs.com/2013/06/28/leaflet-plugin-authoring-guide.html#code>`_
   prescribe que se dispongan los ejemplos.

.. _Leaflet: https://leafletjs.com
.. _Github: https://github.com
.. _Leaflet.iconzoom: https://github.com/sio2sio2/leaflet.iconzoom
.. _leaflet-defaulticon-compatibility: https://github.com/ghybs/leaflet-defaulticon-compatibility

.. _NodeJS: https://nodejs.org/

.. |HTML| replace:: :abbr:`HTML (HyperText Markup Language)`
.. |CSS| replace:: :abbr:`CSS (Cascading Style Sheets)`
.. |SASS| replace:: :abbr:`SASS (Syntactically Awesome Style Sheets)`
.. |GIS| replace:: :abbr:`GIS (Geographic information system)`
.. |UMD| replace::  :abbr:`UMD (Universal Module Definition)`
