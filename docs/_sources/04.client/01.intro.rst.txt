Configuración básica
********************
Lo primero es :ref:`preparar el directorio de trabajo <prep_workdir>` para
después:

Paquetes
=========
Para todo lo que pretendemos necesitamos al menos los siguientes paquetes:

.. code-block:: console

   $ npm install --save-dev webpack webpack-dev-server webpack-cli webpack-merge

Bases la de configuración
=========================
Como nuestro objetivo es utilizar :program:`webpack` como aglutinante de nuestro
código, debemos añadir a :file:`package.json` los siguientes scripts:

.. code-block:: js

   "script": {
      "build": "webpack --mode production"
   }

Por otra parte, necesitamos un fichero para la configuración de
:program:`webpack` llamado :file:`webpack.config.js` con una primera
configuración como ésta:

.. code-block:: js

   const config = {
      entry: "./src/js/index.js",
      output: {
         filename: "js/[name].bundle.js"
      }
   }

   module.exports = config

Esta configuración simplicísima supone que el punto de entrada de nuestra
aplicación es :file:`src/js/index.js` y que el resultado de la acción de
:program:`webpack` se guardará en :file:`dist/js/main.bundle.js`.

.. note:: La configuración hace más de lo que aparenta. No sólo copia el
   fichero, sino que lo minimiza; y, si hemos descompuesto nuestro código en
   varios ficheros (:ref:`módulos <js-modules>`) que se llaman entre sí o
   importa librerías de terceros, reunirá todo dentro del mismo fichero.
   Para excluir módulos del fichero resultante único, consulte más adelante
   :ref:`externals <webpack-externals>`.

El por qué el indicado es el fichero resultante se debe a dos razones:

- Sin configuración adicional, se toma como directorio de resultados
  :file:`/dist`. Veremos más adelante cómo alterar esto.

- El nombre es "*main*", porque la línea que define la entrada es:

  .. code-block:: js

     entry: "./src.js/index.js"

  .. seealso:: Consulte el apartado sobre :ref:`la definición del punto de
     entrada <webpack-entry-point>` para una explicación del hecho.

Por último, debemos crear un código de ejemplo en :file:`src/js/index.js`:

.. code-block:: js

   const foobar = (text) => {
      console.log(`${text}`);
   }

   let mensaje = "Esto es una prueba";
   foobar(mensaje);

en que usamos algunas características nuevas de *Javascript* para ilustrar más
adelante la transpilación con :ref:`babel <babel>`. Escrito el fichero podemos
obtener el resultado con::

   $ npm run build

que creará el fichero :file:`dist/js/main.bundle.js`. Si le echamos un vistazo
veremos que el código se encuentra ofuscado y minimizado.

Desarrollo
==========
La configuración anterior es un ejemplo tan simple que carece por completo de
utilidad, ya que hace inviable la corrección y depuración del código. Es
necesario, crear al menos dos configuraciones: una apropiada para generar el
resultado para producción y otra para generar un resultado apto para depurar
durante el desarrollo. Para ello vamos a crear así los *scripts* en
:file:`packages.json`:

.. code-block:: js

  "scripts": {
    "build": "webpack --mode production --progress",
    "watch": "webpack --mode development --progress --watch",
  }

cuyo sentido es el siguiente:

* :code:`build` compone el resultado para usarlo en producción.
* :code:`watch` compone el resultado para usarlo mientras desarrollamos,
  de modo que se queda expectante a cualquier cambio posterior que hagamos
  para recomponer sobre la marcha el resultado.

El fichero de configuración :file:`webpack.config.js` es este:

.. literalinclude:: files/webpack.config.mode.js
   :language: js
   :emphasize-lines: 1, 13-16

Con ello, además del script ``build`` podemos hacer::

   $ npm run watch

que creará el fichero pero se quedará vigilando cualquier cambio en el fichero
fuente para regenerarlo inmediatamente.

En esta configuración hay dos novedades que merecen comentario:

- Se usa :code:`merge` que permite componer una configuración a partir de varias.
  La composición se entiende de modo muy sencillo con un ejemplo:

  .. code-block:: console

     > merge(
     ...  {a: [1, 2], b: 10, c: 100}
     ...  {a: [3], b: 20, d: 1000}
     ... );
     {a: [1, 2, 3], b: 20, c: 1000, d:1000}

  O sea, los objetos se fusionan juntando atributos de todas las fuentes (caso
  de los dos objetos raíces), los arrays concatenando elementos (caso de *a*), y
  los valores primitivos se sustituyen de manera que queda el valor del último
  objeto (caso de *b*).

  .. note:: Cuando se usa :code:`merge.smart` la función es capaz de entender
     cuándo se quieren fusionar :ref:`arrays de cargadores <webpack-process>`
     y en ocasiones, en vez de concatenarlos sin más, es capaz de hacer
     sustituciones. Más adelante se verá algún ejemplo. En este punto en que
     estamos, :code:`merge.start` y :code:`merge` generan el mismo resultado.

- :file:`webpack.config.js` puede exportar directamente la configuración (que es
  lo que se hizo en la primera configuración) como una función que devuelve la
  configuración. En este segundo caso, tal función recibe dos parámetros:

  + *env*, objeto de entorno que introduciremos más adelante.
  + *argv*, objeto que contiene las argumentos pasados a :program:`webpack`.
    En este caso, lo usamos para saber si se actúa en modo producción o en modo
    desarrollo.

Aplicación simple
=================
Trataremos ahora de montar una aplicación (bastante inútil, todo sea dicho) que
incluya |HTML| y |CSS| y montarla con :program:`webpack`. En este caso, como se
obtiene como resultado una página web, tiene sentido poder depurar la página de
modo interactivo, esto es, que se levante un servidor web y que la página cambie
automáticamente al realizarse algún cambio en alguno de los ficheros fuente.
Para ello, añadimos un tercer *script*:

.. code-block:: js

    "debug": "webpack-dev-server --mode development"

El código fuente se compone de los siguientes ficheros:

.. code-block:: none

   src
    +-- index.html
    |
    +-- js
    |    +-- index.js
    |
    +-- css
         +-- main.css

En este caso, deberemos instalar paquetes adicionales:

.. code-block:: console

   $ npm install --save-dev html-loader html-webpack-plugin
   $ npm install --save-dev css-loader mini-css-extract-plugin
   $ npm install --save-dev url-loader file-loader

Para el *script* podemos usar el ya escrito, con la adición de una línea que
posibilita el procesamiento del |CSS|:

.. code-block:: js
   :emphasize-lines: 1

   import "../css/main.css";

   const foobar = (text) => {
      console.log(`${text}`);
   }

   let mensaje = "Esto es una prueba";
   foobar(mensaje);
   no_existe();  // Esto debe provocar un error en la consola.

.. note:: Hay otra forma de provocar que se procese el fichero |CSS| (o
   cualquier otro tipo de fichero): añadirlo al punto de entrada de
   :program:`webpack`:

   .. code-block:: js

      entry: [ "./src/js/index.js", "./css/main.css" ]

   Esta alternativa puede ser interesante, si el |CSS| procede de código ajeno y
   pretendemos crear una configuración condicional que incluya o no en los
   ficheros resultantes el código de terceros. Más adelante, puede echarle un
   vistazo al :ref:`ejemplo de construcción de un plugin <webpack-ej-plugin>` en
   que se usa esta técnica. La contraprestación es que la dependencia no está
   contenida en el código fuente y, en consecuencia, sólo es patente si se
   procesa el desarrollo con :program:`webpack`.
      
Con la configuración ya vista, bastaría para correr el *script* que acabamos de
definir (*debug*), pero añadiremos una configuración específica para
:program:`webpack-dev-server`:

.. code-block:: js
   :emphasize-lines: 5-8

   return merge.smart(
      config,
      argv.mode === "production"?null:{
         devtool: "inline-source-map",
         devServer: {
            contentBase: false,
            open: "chromium"
         }
      }
   )

Para entender esta configuración, es indispensable conocer cómo funciona, en
realidad, :program:`webpack-dev-server`: en principio, sirve desde un directorio
virtual creado en la memoria los ficheros resultantes del procesamiento. Además,
fusiona este directorio virtual con el directorio de salida (:file:`dist/` en
principio si no se configura otra cosa). Ahora bien, la opción *contentBase*,
permite indicar un directorio distinto del sistema real de ficheros para la
fusión. Si el valor es ``false``, como es el caso, sólo se sirven los ficheros
del directorio virtual (o sea, sólo los ficheros resultantes del procesamiento).
Por supuesto, podemos establecer el valor que queramos, por ejemplo:

.. code-block:: js

   contentBase: require("path").resolve(__dirname, ".")

En este caso, fusionaremos todo el contenido del directorio de trabajo con los
ficheros resultantes. La otra opción, *open*, rige qué se hace al levantar el
servidor:

- Si es ``false``, que es su valor predeterminado al no haber incluido el
  argumento :code:`--open`\ [#]_ en :file:`package.json`, no se abre una ventana
  con la aplicación en el navegador, así que tendremos que abrir manualmente
  nosotros la página eni la dirección::

   http://localhost:8080

- Si toma valor, debe ser una cadena que indique el navegador con el que se
  quiere ver la aplicación.

- Si es ``true``, se usa el navegador predefinido por el sistema\ [#]_.

.. note:: Aunque tenga un interés muy relativo, también es posible hacer
   que los ficheros resultantes se escriban en disco.

   .. code-block:: js

      devServer: {
         writeToDisk: true,
         contentBase: false
         open: "chromium"
      }

   En este caso, además de publicarse el contenido a través del servidor, se
   escribirán los ficheros resultantes en el directorio de salida.

.. _webpack-simple-html:

Por su parte, :file:`index.html` puede ser el siguiente:

.. code-block:: html

   <!DOCTYPE html>
   <html lang="es">
   <head>
      <meta charset="UTF-8">
      <title>Aplicación simple</title>
   </head>
   <body>
      <h1>Aplicación simple</h1>
   </body>
   </html>

Obsérvese que es necesario incluir las etiquetas `<head>
<https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head>`_ y `<body>
<https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body>`_ para el
plugin :program:`HtmlWebpackPlugin` inserte correctamente el *script* dentro del
|HTML|. Para ilustrar cómo manejar |CSS|, creemos :file:`css/index.css`.

.. code-block:: css

   body {
      blackground-color: yellow;
   }

Como puede verse, no hay referencia en el |HTML| ni al *script* ni a la hoja de
estilos, ya que se pretende que :program:`webpack` se encargue de incorpar las
referencias pertinentes. Modifiquemos, por último, en :file:`webpack.config.js`
la configuración común, ya que tanto en producción como en desarrollo hay que
procesar |HTML| y |CSS|:

.. _webpack-simple:

.. code-block:: js

   // Configuración común a ambos modos
   const config = {
      entry: "./src/js/index.js",
      output: {
         filename: "js/[name].bundle.js"
      },
      module: {
         rules: [
            {
               test: /\.html$/,
               use: {
                  loader: "html-loader",
                  options: { minimize: true }
               }
            },
            {
               test: /\.css$/,
               use: [MiniCssExtractPlugin.loader,
                     "css-loader"]
            }
         ]
      },
      plugins: [
         new HtmlWebPackPlugin({
            template: "src/index.html",
            //filename: "index.html"   // Es el valor predeterminado
         }),
         new MiniCssExtractPlugin({
            filename: "css/[name].css",
            chunkFilename: "[id].css"
         })
      ]
   }

Podemos ahora generar el resultado con::

   $ npm run build

pero como en esta ocasión sí tenemos un |HTML|, podría interesarnos levantar un
servidor web para que recargue la aplicación cada vez que hagamos un cambio en el
código fuente::

   $ npm run debug

Además, gracias a que hemos incluido la línea::

   devtool: 'inline-source-map'

los errores que genere la ejecución del código (en nuestro ejemplo hemos
incluido una línea que hace referencia a una función inexistente) referirán los
ficheros originales (:file:`src/js/index.js`) e incluso podremos fijar sobre
ellos puntos de ruptura para llevar a cabo la depuración del código\ [#]_.

Por defecto, los mapeos se escriben como comentarios dentro de los propios
ficheros ``.js``. Podemos hacer que se escriban en fichero aparte modificando
la configuración referida al desarrollo:

.. code-block:: js
   :emphasize-lines: 4-9

   return merge.smart(
      config,
      argv.mode === "production"?null:{
         devtool: false,
         plugins: [
            new webpack.SourceMapDevToolPlugin({
               filename: 'js/[name].js.map'
            })
         ]
         devServer: {
            contentBase: false,
            open: "chromium"
         }
      }
   )

.. rubric:: Enlaces de interés

* En el interesante `blog de Valentino Gagliardi
  <https://www.valentinog.com/blog/>`_ hay una entrada de `introducción a
  Webpack4 <https://www.valentinog.com/blog/webpack/>`_ y otra para describir
  `cómo hacer con Webpack4 tareas que se hacen con Gulp
  <https://www.valentinog.com/blog/from-gulp-to-webpack-4-tutorial/>`_ y que
  puede informar de algunos aspectos adicionales a los explicados en la primera
  entrada

.. ¿Merecen estos scripts la pena?
   https://www.robinwieruch.de/javascript-project-setup-tutorial/
   https://www.robinwieruch.de/webpack-advanced-setup-tutorial/

.. rubric:: Notas al pie

.. [#] Si se usa :code:`--open` sin argumento adicional:

   .. code-block:: js

      "debug": "webpack-dev-server --mode development --open"

   tomará como valor :code:`true`. Sin embargo, puedo añadirse el navegador que
   se quiere usar:

   .. code-block:: js

      "debug": "webpack-dev-server --mode development --open chromium"

   Se prefiere, no obstante, no incluir el argumento y darle valor a *open* a
   través de la configuración.

.. [#] En los sistemas *linux*, el navegador predefinido es el que se obtiene
   así:

   .. code-block:: console

      $ xdg-settings get default-web-browser
      firefox-esr.desktop

.. [#] Los ficheros fuente podremos encontrarlos en el navegador dentro del ítem
   :code:`webpack://`.

.. |HTML| replace:: :abbr:`HTML (HyperText Markup Language)`
.. |CSS| replace:: :abbr:`CSS (Cascading Style Sheets)`
